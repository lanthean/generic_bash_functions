#!/bin/bash
###
# @Author Martin Bortel
# @Email  martin.bortel@gmail.com
# @Created  02/07/2018
# @Updated  06/08/2019
# 
# @Package  My generic bash functions
#
###
function log(){
  #
  # Log messages to stdout or $LOG_FILE if set
  # $LOG_LEVEL="info"
  #
  # Usage: log <level> <message>
  # level: [d]ebug|[i]nfo|[w]arning|[e]rror
  # message: log message

  declare -A levels=([d]=0 [i]=1 [w]=2 [e]=3)
  if [ -z $LOGGING_LEVEL ];then
    LOGGING_LEVEL="info"
  fi

  if [[ ! -z $LOG_FILE && -d $(dirname $LOG_FILE) ]];then
    if [[ ! -f $LOG_FILE ]];then
      touch $LOG_FILE
    fi
    log_file=$LOG_FILE
    time_stamp=$(date +"%Y-%m-%d %H:%I:%S %Z")
  else
    log_file=/dev/null
    time_stamp=""
  fi

  local log_message=$1
  local log_priority=$2

  #check if level exists
  [[ ${levels[$log_priority]} ]] || return 1

  #check if level is enough
  (( ${levels[$log_priority]} < ${levels[$script_logging_level]} )) && return 2

  ##
  # Color table
  # --
  # Black        0;30     Dark Gray     1;30
  # Red          0;31     Light Red     1;31
  # Green        0;32     Light Green   1;32
  # Brown/Orange 0;33     Yellow        1;33
  # Blue         0;34     Light Blue    1;34
  # Purple       0;35     Light Purple  1;35
  # Cyan         0;36     Light Cyan    1;36
  # Light Gray   0;37     White         1;37
  # --
  # Colour output
  #    .---------- constant part!
  #    vvvv vvvv-- the code from above
  # RED='\033[0;31m'
  # NC='\033[0m' # No Color
  # printf "I ${RED}love${NC} Stack Overflow\n"
  NC='\033[0m' # No Color
  case $log_level in
    \?)
      COLOUR='\033[0;37m'
      printf "$time_stamp | ${COLOUR}[?]${NC} $log_message" | tee -a $log_file
      ;;
    d)
      COLOUR='\033[1;30m'
      printf "$time_stamp | ${COLOUR}[d]${NC} $log_message\n" | tee -a $log_file
      ;;
    i)
      COLOUR='\033[0;32m'
      printf "$time_stamp | ${COLOUR}[i]${NC} $log_message\n" | tee -a $log_file
      ;;
    w)
      COLOUR='\033[0;31m'
      printf "$time_stamp | ${COLOUR}[w] $log_message${NC}\n" | tee -a $log_file
      ;;
    e)
      COLOUR='\033[1;31m'
      printf "$time_stamp | ${COLOUR}[e] $log_message${NC}\n" | tee -a $log_file
      ;;
    *)
      printf "$time_stamp $1\n" | tee -a $log_file
      ;;
  esac
  }
logThis() {
  }

function sys_log() {
  #
  # Log messages to local6 (/var/log/local6)
  # LOGGING_LEVEL="info"
  #
	# $1 - severity (debug|info|warning|error)
	# $2 - log message
	#
	# EXAMPLE:
	# log debug "Info level log message into local6 syslog facility with prefix [debug]"
	# log info "Info level log message into local6 syslog facility with prefix [info]"
	# log warning "Info level log message into local6 syslog facility with prefix [warning]"
	# log error "Info level log message into local6 syslog facility with prefix [error]"
	#
	# @TODO:
  #   - Update to use severity levels - if possible, not just prefix
  declare -A levels=([debug]=0 [info]=1 [warning]=2 [error]=3)
  if [ -z $LOGGING_LEVEL ];then
    LOGGING_LEVEL="info"
  fi

  local log_message=$1
  local log_priority=$2

  #check if level exists
  [[ ${levels[$log_priority]} ]] || return 1

  #check if level is enough
  (( ${levels[$log_priority]} < ${levels[$script_logging_level]} )) && return 2
	
	if [[ -f /usr/bin/logger ]];then
		if [ $# -gt 0 ]; then
			/usr/bin/logger -i -t $0 -p local6.info "[$1] $2"
		fi
	fi
  }
# EOF
